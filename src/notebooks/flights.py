# -*- coding: utf-8 -*-
"""flights.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1dZJeWhO9V48GS88KEyPCZy0V-8cFjIp7
"""

import pandas as pd
import numpy as np

def read_dataset(path: str, index_col: int) -> pd.DataFrame:
    try:
        with open(path) as f:
            return pd.read_csv(path, index_col=index_col)
    except (FileExistsError, FileNotFoundError) as e:
        print(f"File not found error {e}")

df = read_dataset("/content/airlines_flights_data.csv", index_col=0)

df.sample(n=10)

df.info()

df["stops"].value_counts()

import seaborn as sns
import matplotlib.pyplot as plt

sns.pairplot(data=df)

# Data Transformation
isinstance(df["price"].dtype, int)

df["price"].dtype

for column in df.select_dtypes(include='object'):
    print(df[column].value_counts())

df["airline"].dtypes

print(set(df["flight"]))

categorical_features = ["airline", "class"]

df.columns

complete_list = list(df.columns)
non_categorical_features = ['flight', 'duration', 'days_left', 'price','stops']
for col in non_categorical_features:
  complete_list.remove(col)

categorical_features = complete_list + ['stops']
numerical_features = ['duration','days_left']
target = 'price'

# One hot encode our categorical variables
from sklearn.preprocessing import OneHotEncoder
from sklearn.compose import ColumnTransformer
# sparse_output = False allows us to get a dataframe output
# handle_unknown='ignore' is important so that new data are considered during production

ohe = OneHotEncoder(sparse_output=False, handle_unknown='ignore')
transform_data = ColumnTransformer(transformers=[('onehot', ohe, categorical_features)],
                                   remainder='passthrough')
#
data = transform_data.fit_transform(df)
# passthrough indicates that there will be other features which will not be one hot encoded

features = transform_data.get_feature_names_out()

df_encoded = pd.DataFrame(data, columns=features)
df_encoded

df_encoded.columns = df_encoded.columns.str.replace("onehot__", "").str.replace("remainder__", "")

df_encoded

df_encoded['stops'].value_counts()

'flight' in df_encoded.columns

from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split

final_features = list(df_encoded.columns)
final_features.remove('price')

X = df_encoded[final_features]
y = df_encoded['price']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

model = RandomForestRegressor(random_state=42)

model.fit(X_train, y_train)
predicted_price = model.predict(X_test)

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)
model.fit(X_train, y_train)
predicted_price = model.predict(X_test)

data = transform_data.fit_transform(df)
df_encoded = pd.DataFrame(data, columns=transform_data.get_feature_names_out())
df_encoded.columns = df_encoded.columns.str.replace("onehot__", "").str.replace("remainder__", "")

final_features = list(df_encoded.columns)
final_features.remove('price')
final_features.remove('flight')

X = df_encoded[final_features]
y = df_encoded['price']

from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score

mae = mean_absolute_error(y_test, predicted_price)
mse = mean_squared_error(y_test, predicted_price)
rmse = mean_squared_error(y_test, predicted_price, squared=False) # Calculate RMSE
r2 = r2_score(y_test, predicted_price)

print(f"Mean Absolute Error (MAE): {mae}")
print(f"Mean Squared Error (MSE): {mse}")
print(f"Root Mean Squared Error (RMSE): {rmse}")
print(f"R-squared (R2): {r2}")

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

model.fit(X_train, y_train)

predicted_price = model.predict(X_test)

from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score

mae = mean_absolute_error(y_test, predicted_price)
mse = mean_squared_error(y_test, predicted_price)
rmse = np.sqrt(mse) # Calculate RMSE manually
r2 = r2_score(y_test, predicted_price)

print(f"Mean Absolute Error (MAE): {mae}")
print(f"Mean Squared Error (MSE): {mse}")
print(f"Root Mean Squared Error (RMSE): {rmse}")
print(f"R-squared (R2): {r2}")